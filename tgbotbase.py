# -*- coding: utf-8 -*-
import sqlite3
import telebot
from datetime import datetime
from telebot import types

bot = telebot.TeleBot('–í–ê–®_–¢–û–ö–ï–ù')  # ‚Üê –í–°–¢–ê–í–¨ —Å–≤–æ–π —Ç–æ–∫–µ–Ω —Å—é–¥–∞

ADMIN_LOGIN = '–í–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω'
ADMIN_PASSWORD = '–í–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–ª—å'

def init_db():
    conn = sqlite3.connect('bazadanix.sql')
    cur = conn.cursor()
    cur.execute('''CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        pass TEXT,
        email TEXT,
        phone TEXT,
        location TEXT,
        created_at TEXT
    )''')
    conn.commit()
    conn.close()

init_db()

# üìå –ü–æ–º–æ—â–Ω–∏–∫ –ø—Ä–∏ /start (–ë–ï–ó –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è)
@bot.message_handler(commands=['start'])
def show_info(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚ûï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å", callback_data="new"),
        types.InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="check"),
        types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –≤—Å—ë", callback_data="delet")
    )
    bot.send_message(message.chat.id,
        'üëã –¢—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç EMRX.\n\n'
        '‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥—ã:\n'
        '‚Ä¢ /new ‚Äì –≤–Ω–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ\n'
        '‚Ä¢ /check ‚Äì –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ\n'
        '‚Ä¢ /delet ‚Äì —É–¥–∞–ª–∏—Ç—å –≤—Å—é —Ç–∞–±–ª–∏—Ü—É\n\n'
        'üìå –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:', reply_markup=markup)

# üîò –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.data == 'new': 
        start_register(call.message)
    elif call.data == 'check':
        check_data(call.message)
    elif call.data == 'delet':
        start_deletion(call.message)

# üîπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@bot.message_handler(commands=['new'])
def start_register(message):
    bot.send_message(message.chat.id, 'üîê –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:')
    bot.register_next_step_handler(message, verify_admin_for_new)

def verify_admin_for_new(message):
    login = message.text.strip()
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:')
    bot.register_next_step_handler(message, continue_register, login)

def continue_register(message, login):
    password = message.text.strip()
    if login == ADMIN_LOGIN and password == ADMIN_PASSWORD:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
        bot.register_next_step_handler(message, user_name)
    else:
        bot.send_message(message.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.')

def user_name(message):
    name = message.text.strip()
    if not name:
        bot.send_message(message.chat.id, '‚ùó –õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
        return
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:')
    bot.register_next_step_handler(message, user_pass, name)

def user_pass(message, name):
    password = message.text.strip()
    if not password:
        bot.send_message(message.chat.id, '‚ùó –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
        return
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ email:')
    bot.register_next_step_handler(message, user_email, name, password)

def user_email(message, name, password):
    email = message.text.strip()
    if not email:
        bot.send_message(message.chat.id, '‚ùó Email –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
        return
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω:')
    bot.register_next_step_handler(message, user_phone, name, password, email)

def user_phone(message, name, password, email):
    phone = message.text.strip()
    if not phone:
        bot.send_message(message.chat.id, '‚ùó –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
        return
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞:')
    bot.register_next_step_handler(message, user_location, name, password, email, phone)

def user_location(message, name, password, email, phone):
    location = message.text.strip()
    if not location:
        bot.send_message(message.chat.id, '‚ùó –ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
        return
    created_at = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    conn = sqlite3.connect('bazadanix.sql')
    cur = conn.cursor()
    cur.execute('INSERT INTO users (name, pass, email, phone, location, created_at) VALUES (?, ?, ?, ?, ?, ?)',
                (name, password, email, phone, location, created_at))
    conn.commit()
    conn.close()

    bot.send_message(message.chat.id, '‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.')

# üîç –ü—Ä–æ–≤–µ—Ä–∫–∞
@bot.message_handler(commands=['check'])
def check_data(message):
    bot.send_message(message.chat.id, 'üîê –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:')
    bot.register_next_step_handler(message, check_admin_for_check)

def check_admin_for_check(message):
    login = message.text.strip()
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:')
    bot.register_next_step_handler(message, continue_check, login)

def continue_check(message, login):
    password = message.text.strip()
    if login == ADMIN_LOGIN and password == ADMIN_PASSWORD:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:')
        bot.register_next_step_handler(message, get_login_for_check)
    else:
        bot.send_message(message.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.')

def get_login_for_check(message):
    login = message.text.strip()
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:')
    bot.register_next_step_handler(message, get_password_for_check, login)

def get_password_for_check(message, login):
    password = message.text.strip()
    conn = sqlite3.connect('bazadanix.sql')
    cur = conn.cursor()
    cur.execute('SELECT * FROM users WHERE name = ? AND pass = ?', (login, password))
    user = cur.fetchone()
    conn.close()

    if user:
        bot.send_message(message.chat.id, f'‚úÖ –ù–∞–π–¥–µ–Ω–æ:\n–õ–æ–≥–∏–Ω: {user[1]}\n–ü–∞—Ä–æ–ª—å: {user[2]}\nEmail: {user[3]}\n'
                                          f'–¢–µ–ª–µ—Ñ–æ–Ω: {user[4]}\n–ê–∫–∫–∞—É–Ω—Ç: {user[5]}\n–î–∞—Ç–∞: {user[6]}')
    else:
        bot.send_message(message.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.')

# üß® –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
@bot.message_handler(commands=['delet'])
def start_deletion(message):
    bot.send_message(message.chat.id, 'üîê –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:')
    bot.register_next_step_handler(message, check_admin_login)

def check_admin_login(message):
    login = message.text.strip()
    bot.send_message(message.chat.id, 'üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:')
    bot.register_next_step_handler(message, check_admin_password, login)

def check_admin_password(message, login):
    password = message.text.strip()
    if login == ADMIN_LOGIN and password == ADMIN_PASSWORD:
        bot.send_message(message.chat.id, '‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö. –ù–∞–ø–∏—à–∏—Ç–µ "–ü–û–î–¢–í–ï–†–ñ–î–ê–Æ"')
        bot.register_next_step_handler(message, confirm_delete)
    else:
        bot.send_message(message.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.')

def confirm_delete(message):
    if message.text.strip().upper() == '–ü–û–î–¢–í–ï–†–ñ–î–ê–Æ':
        conn = sqlite3.connect('bazadanix.sql')
        cur = conn.cursor()
        cur.execute('DELETE FROM users')
        conn.commit()
        conn.close()
        bot.send_message(message.chat.id, 'üóëÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.')
    else:
        bot.send_message(message.chat.id, '‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')

bot.polling(none_stop=True)
